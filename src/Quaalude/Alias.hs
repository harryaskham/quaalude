module Quaalude.Alias where

import Data.Complex (Complex)
import Data.Fin (Fin)
import Data.Type.Nat
import Relude.Unsafe qualified as U

-- Numeric

type ‚Ñ§' = Int

type ‚Ñ§‚ÇÜ‚ÇÑ = Int

type ‚Ñ§ = Integer

type ‚Ñ§¬≤ = (‚Ñ§, ‚Ñ§)

type ‚Ñ§¬≥ = (‚Ñ§, ‚Ñ§, ‚Ñ§)

type ‚Ñ§‚Å¥ = (‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§)

type ‚Ñ§‚Åµ = (‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§)

type ‚Ñ§‚Å∂ = (‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§)

type ‚Ñ§‚Å∑ = (‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§)

type ‚Ñ§‚Å∏ = (‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§)

type ‚Ñ§‚Åπ = (‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§)

type ‚Ñ§¬π‚Å∞ = (‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§, ‚Ñ§)

type ‚Ñï = Natural

type Nat10 = 'S Nat9

type ‚Ñï‚ÇÅ = Fin Nat1

type ‚Ñï‚ÇÇ = Fin Nat2

type ‚Ñï‚ÇÉ = Fin Nat3

type ‚Ñï‚ÇÑ = Fin Nat4

type ‚Ñï‚ÇÖ = Fin Nat5

type ‚Ñï‚ÇÜ = Fin Nat6

type ‚Ñï‚Çá = Fin Nat7

type ‚Ñï‚Çà = Fin Nat8

type ‚Ñï‚Çâ = Fin Nat9

type ‚Ñï‚ÇÅ‚ÇÄ = Fin Nat10

type ‚Ñï‚ÇÅ‚ÇÄ¬≤ = (‚Ñï‚ÇÅ‚ÇÄ, ‚Ñï‚ÇÅ‚ÇÄ)

type ‚Ñö = Rational

type ‚Ñö¬≤ = (‚Ñö, ‚Ñö)

type ‚Ñù = Double

type ‚Ñù¬≤ = (‚Ñù, ‚Ñù)

type ‚ÑÇ = Complex ‚Ñù

type ùîπ = Bool

class Inf a where
  infinity :: a
  (‚àû) :: a
  (‚àû) = infinity
  Íùè :: a
  Íùè = infinity

pattern Íùé <- infinity

-- Functional

bottom :: a
bottom = (‚ä•)

(‚ä•) :: a
(‚ä•) = error "Reached ‚ä•"

(‚àò) :: (b -> c) -> (a -> b) -> a -> c
(‚àò) = (.)

infixr 9 ‚àò

(‚ãÖ) :: (Num a) => a -> a -> a
(‚ãÖ) = (*)

infixl 7 ‚ãÖ

-- Boolean

(‚â°) :: (Eq a) => a -> a -> Bool
(‚â°) = (==)

infix 4 ‚â°

(‚â¢) :: (Eq a) => a -> a -> Bool
(‚â¢) = (/=)

(‚â§) :: (Ord a) => a -> a -> Bool
(‚â§) = (<=)

infix 4 ‚â§

(‚â•) :: (Ord a) => a -> a -> Bool
(‚â•) = (>=)

infix 4 ‚â•

(‚àß) :: Bool -> Bool -> Bool
(‚àß) = (&&)

infixr 3 ‚àß

(‚à®) :: Bool -> Bool -> Bool
(‚à®) = (||)

infixr 2 ‚à®

type family QuestionableF a where
  QuestionableF (Maybe a) = a

type family QuestionableFR a where
  QuestionableFR (Maybe a) = a

class Questionable a where
  (?) :: a -> QuestionableF a -> QuestionableFR a

infixl 1 ?

instance Questionable (Maybe a) where
  (?) = flip fromMaybe

(???) :: forall a. Bool -> a -> (a -> a)
True ??? a = flip const a
False ??? a = const a

infixl 1 ???

-- Monoidal

(<>.) :: (Monoid c) => (b -> [c]) -> (a -> b) -> (a -> c)
g <>. f = mconcat . g . f

infixr 9 <>.

(<>‚àò) :: (Monoid c) => (b -> [c]) -> (a -> b) -> (a -> c)
g <>‚àò f = g <>. f

infixr 9 <>‚àò

(<>!) :: (Monoid a) => [a] -> a
(<>!) = mconcat

infixl 0 <>!

(<>?) :: (Monoid a) => [Maybe a] -> [a]
(<>?) = catMaybes

infixl 0 <>?

(¬±) :: (Num a) => a -> a
(¬±) = signum

infixl 0 ¬±

(‚á±) :: (Bifunctor p) => (a -> b) -> p a c -> p b c
(‚á±) = first

infixr 0 ‚á±

(‚á≤) :: (Bifunctor p) => p b a -> (a -> c) -> p b c
(‚á≤) = flip second

infixr 0 ‚á≤

(#) :: (Monad m) => a -> m a
(#) = return

infixl 0 #
